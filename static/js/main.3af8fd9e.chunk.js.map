{"version":3,"sources":["pages/SearchPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Title","Typography","SearchPage","navigate","useNavigate","useState","parameters","setParameters","collection","setCollection","collectionMetadata","setCollectionMetadata","Map","labeledList","setLabeledList","values","a","pageNumber","processCollection","data","exportLabeledList","finalObject","query","Array","from","entries","map","result","console","log","content","fileName","type","element","document","createElement","textFile","Blob","href","URL","createObjectURL","download","body","appendChild","click","exportFile","JSON","stringify","useEffect","fetchResults","apiKey","language","imgonly","fetch","then","response","json","fetchData","className","onBack","title","subTitle","span","level","name","labelCol","wrapperCol","layout","initialValues","onFinish","onFinishFailed","errorInfo","autoComplete","Item","label","rules","required","message","valuePropName","offset","htmlType","onClick","itemLayout","size","pagination","dataSource","renderItem","item","actions","prev","addToList","key","copy","delete","disabled","has","extra","width","alt","src","Meta","avatar","style","backgroundColor","icon","CheckCircleOutlined","description","currentParameters","length","displayName","App","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","basename","getElementById"],"mappings":"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","file":"static/js/main.3af8fd9e.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Row, Col, PageHeader, Input, Form, Button, Checkbox, List, Avatar } from \"antd\";\nimport { useNavigate } from \"react-router-dom\";\nimport { Typography } from 'antd';\nimport { CheckCircleOutlined } from '@ant-design/icons';\n\nconst { Title } = Typography\n\nconst DEFAULT_LANGUAGE = 'en';\nconst DEFAULT_TYPE = 'painting';\nconst DEFAULT_IMGONLY = true;\n\nconst DEFAULT_PAGE_LENGTH = 10;\n\nfunction SearchPage(): JSX.Element {\n  const navigate = useNavigate();\n\n  const [parameters, setParameters] = useState<any>(null);\n  const [collection, setCollection] = useState<Array<any>>([]);\n  const [collectionMetadata, setCollectionMetadata] = useState<any>(null);\n\n  const [labeledList, setLabeledList] = useState(() => new Map());\n\n  useEffect(() => {\n    async function fetchResults(): Promise<any> {\n      const {\n        apiKey,\n        language,\n        type,\n        imgonly,\n        query,\n        pageNumber,\n      } = parameters;\n  \n      const URL = `https://www.rijksmuseum.nl/api/${language}/collection?key=${apiKey}&type=${type}&imgonly=${imgonly}&q=${query}&ps=${DEFAULT_PAGE_LENGTH}&p=${pageNumber}`;\n  \n      const data = await fetch(URL)\n        .then(response => response.json())\n        .then(data => processCollection(data));\n  \n      return data;\n    }\n\n    async function fetchData() {\n      setCollection(await fetchResults());\n    }\n    if (parameters) {\n      fetchData();\n    }\n  }, [parameters]);\n\n  async function onSearch(values: any): Promise<void> {\n    setParameters({\n      ...values,\n      pageNumber: 1,\n    });\n  };\n\n  function processCollection(data: any): any[] {\n    setCollectionMetadata({\n      'count': data['count'],\n      'countFacets': data['countFacets'],\n    });\n    return data['artObjects'];\n  }\n\n  function addToList(item: any): void {\n    setLabeledList(\n      prev => new Map([...prev, [item['objectNumber'], item]]));\n  }\n\n  function removeFromList(key: any): void {\n    setLabeledList(\n      prev => {\n        const copy: Map<any, any> = new Map<any, any>(prev);\n        copy.delete(key);\n        return copy;\n      }\n    );\n  }\n\n  function exportLabeledList(): void {\n    const finalObject = {\n      'query': parameters.query,\n      'results': Array.from(labeledList.entries()).map(result => result[1]),\n    }\n    console.log(finalObject);\n    const content = JSON.stringify(finalObject);\n    const fileName = 'results.json';\n    const type = 'application/json';\n    exportFile(content, fileName, type);\n  }\n\n  function exportFile(content: string, fileName: string, type: string): void {\n    const element = document.createElement(\"a\");\n    const textFile = new Blob([content], { type: type });\n    element.href = URL.createObjectURL(textFile);\n    element.download = fileName;\n    document.body.appendChild(element); \n    element.click();\n  }\n\n  function onFinishFailed(errorInfo: any): void {\n    console.log('Failed:', errorInfo);\n  };\n\n  return (\n    <>\n      <PageHeader\n        className=\"site-page-header\"\n        onBack={() => navigate(-1)}\n        title=\"Search Rijksmuseum\"\n        subTitle=\"Search the Collection API (GET /api/[culture]/collection)\"\n      />,\n      <Row>\n        <Col span={24}>\n          <Row>\n            <Col span={24}>\n              <Title level={4}>Parameters</Title>\n            </Col>\n          </Row>\n          <Row>\n            <Col span={20}>\n              <Form\n                name=\"basic\"\n                labelCol={{ span: 12 }}\n                wrapperCol={{ span: 16 }}\n                layout=\"inline\"\n                initialValues={{\n                  language: DEFAULT_LANGUAGE,\n                  type: DEFAULT_TYPE,\n                  imgonly: DEFAULT_IMGONLY,\n                }}\n                onFinish={onSearch}\n                onFinishFailed={onFinishFailed}\n                autoComplete=\"off\"\n              >\n                <Form.Item\n                  label=\"API Key\"\n                  name=\"apiKey\"\n                  rules={[{ required: true, message: 'Please set API key!' }]}\n                >\n                  <Input />\n                </Form.Item>\n\n                <Form.Item\n                  label=\"Language\"\n                  name=\"language\"\n                  rules={[{ required: true, message: 'Please set language!' }]}\n                >\n                  <Input />\n                </Form.Item>\n\n                <Form.Item\n                  label=\"Type\"\n                  name=\"type\"\n                  rules={[{ required: true, message: 'Please set type!' }]}\n                >\n                  <Input />\n                </Form.Item>\n\n                <Form.Item\n                  name=\"imgonly\"\n                  valuePropName=\"checked\"\n                  wrapperCol={{ offset: 8, span: 16 }}\n                >\n                  <Checkbox>Only with images</Checkbox>\n                </Form.Item>\n\n                <Form.Item\n                  label=\"Query\"\n                  name=\"query\"\n                >\n                  <Input />\n                </Form.Item>\n\n                <Form.Item wrapperCol={{ offset: 8, span: 16 }}>\n                  <Button type=\"primary\" htmlType=\"submit\">\n                    Search\n                  </Button>\n                </Form.Item>\n              </Form>\n            </Col>\n            <Col span={4}>\n              <Button type=\"primary\" onClick={() => exportLabeledList()}>\n                Export to JSON\n              </Button>\n            </Col>\n          </Row>\n        </Col>\n      </Row>\n      {collectionMetadata && <Row>\n        <Col span={24}>\n          <Title level={5}>Found {collectionMetadata['count']} art objects, {collectionMetadata['countFacets']['hasimage']} have images.</Title>\n        </Col>\n      </Row>}\n      {parameters && (\n        <Row>\n          <Col span={24}>\n            <Row>\n              <Col span={24}>\n                <List\n                  itemLayout=\"vertical\"\n                  size=\"large\"\n                  pagination={false}\n                  dataSource={collection}\n                  renderItem={item => (\n                    <List.Item\n                      key={item['objectNumber']}\n                      actions={[\n                        <Button onClick={() => addToList(item)}>\n                          Add to List\n                        </Button>,\n                        <Button onClick={() => removeFromList(item['objectNumber'])} disabled={!labeledList.has(item['objectNumber'])}>\n                          Remove from List\n                        </Button>,\n                      ]}\n                      extra={\n                        <img\n                          width={500}\n                          alt=\"logo\"\n                          src={item['webImage']['url']}\n                        />\n                      }\n                    >\n                      <List.Item.Meta\n                        avatar={labeledList.has(item['objectNumber']) && <Avatar style={{ backgroundColor: \"green\" }} icon={<CheckCircleOutlined />} />}\n                        title={<a href={item['links']['web']}>{item['title']}</a>}\n                        description={item['longTitle']}\n                      />\n                      {item['objectNumber']}\n                    </List.Item>\n                  )}\n                />\n              </Col>\n            </Row>\n            <Row>\n              <Col span={2}>\n                <Button onClick={() => setParameters((currentParameters: any) => {\n                  return {\n                    ...currentParameters,\n                    pageNumber: currentParameters.pageNumber - 1,\n                  }\n                })} disabled={parameters.pageNumber <= 1}>\n                  Previous\n                </Button>\n              </Col>\n              <Col span={1}>\n                {parameters.pageNumber}\n              </Col>\n              <Col span={2}>\n                <Button onClick={() => setParameters((currentParameters: any) => {\n                  return {\n                    ...currentParameters,\n                    pageNumber: currentParameters.pageNumber + 1,\n                  }\n                })} disabled={collection.length === 0 || collection.length < DEFAULT_PAGE_LENGTH}>\n                  Next\n                </Button>\n              </Col>\n            </Row>\n          </Col>\n        </Row>\n      )}\n    </>\n  )\n}\n\nSearchPage.displayName = 'SearchPage';\nexport default SearchPage;\n","import { Row, Col } from \"antd\";\nimport { Routes, Route } from \"react-router-dom\";\n\nimport './App.scss';\nimport SearchPage from \"./pages/SearchPage\";\n\nfunction App() {\n  return (\n    <>\n      <Row>\n        <Col span={24}>\n          <Routes >\n            <Route path=\"/search\" element={<SearchPage />} />\n          </Routes>\n        </Col>\n      </Row>\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from \"react-router-dom\";\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter basename=\"/rijksdraw\">\n      <App />\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}